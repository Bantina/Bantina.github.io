[{"title":"Mac","date":"2017-08-21T06:07:31.000Z","path":"2017/08/21/Mac/","text":"","tags":[]},{"title":"Plateau-Nirvana","date":"2017-03-07T03:31:43.000Z","path":"2017/03/07/Plateau-Nirvana/","text":"Many a hand has scaled the grand old face of the plateauSome belong to strangers and some to folks you knowHoly ghosts and talk show hosts are planted in the sandTo beautify the foothills and shake the many handsThe nothing on the top but a bucket and a mopAnd an illustrated book about birdsYou see a lot up there but don’t be scaredWho needs action when you got wordsWhen you’ve finished with the mop then you can stopAnd look at what you’ve doneThe plateau’s clean’ no dirt to be seenAnd the work it took was funThe nothing on the top but a bucket and a mopAnd an illustrated book about birdsYou see a lot up there but don’t be scaredWho needs action when you got wordsWell the many hands began to scan around for the next plateauSome said it was in Greenland and some in MexicoSome decided it was nowhere except for where they stoodBut they were all just guesses’ wouldn’t help you if they could许多双手剥去了这宏伟而又苍老高原的鳞片有些是陌生人 有些是你所知道的人神圣的幽灵和脱口秀主持人被种植在沙滩上为了美化 这片山丘并与许多人握手丘顶 上只有一个水桶和一个拖把还有份关于鸟儿的插图杂志你在那儿能看到不少东西但是别怕当你得到消息时谁会采取行动呢？当你用 拖把干完活你就可以停下了看看你做了什么这片高原被打扫的一尘不染这活儿其实也挺好玩的丘顶 上只有一个水桶和一个拖把还有份关于鸟儿的插图杂志你在那儿能看到不少东西但是别怕当你得到消息时谁会采取行动呢？好吧 人们又开始审视找寻周围下一个高原有些人说在格陵兰有些人说在墨西哥有些人认定就是自己脚下这片土地但是他们都只是瞎猜 并不能帮得上你啊","tags":[{"name":"音乐","slug":"音乐","permalink":"https://bantina.github.io/tags/音乐/"}]},{"title":"Hello World","date":"2017-03-06T08:33:34.000Z","path":"2017/03/06/hello-world/","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new \"My New Post\" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","tags":[]},{"title":"有趣的CSS字体库","date":"2017-03-06T06:36:28.000Z","path":"2017/03/06/有趣的CSS字体库/","text":"一、Mountains of Christmas 1.引入方式： 1.）html中引入：1&lt;link href='https://fonts.googleapis.com/css?family=Mountains+of+Christmas' rel='stylesheet' type='text/css'&gt; 2.）CSS中引入：123@import 'https://fonts.googleapis.com/css?family=Mountains+of+Christmas';/*或者*/@import url(https://fonts.googleapis.com/css?family=Mountains+of+Christmas); 添加样式：12345678910h1 &#123; margin: 0 auto; width: 20em; text-align: center; font-size: 1.4em; font-weight: 100; font-family: 'Mountains of Christmas'; text-shadow: 0 0 20px black; opacity: .8; &#125; 实现效果二、Raleway12@import 'http://fonts.googleapis.com/css?family=Raleway:300,500';font-family: Raleway, \"Helvetica\", \"Arial\", sans-serif; 三、Molle12@import url(https://fonts.googleapis.com/css?family=Molle:400italic&amp;subset=latin,latin-ext);font-family: &apos;Molle&apos;, cursive; 四、Pacifico1&lt;link href=\"https://fonts.googleapis.com/css?family=Pacifico\" rel=\"stylesheet\"&gt; 1font-family: 'Pacifico', cursive; 五、Cookie12@import url('https://fonts.googleapis.com/css?family=Cookie');font-family: 'Cookie', cursive;","tags":[{"name":"css","slug":"css","permalink":"https://bantina.github.io/tags/css/"}]},{"title":"There is love - Chasen","date":"2016-12-27T02:49:23.000Z","path":"2016/12/27/There-is-love-Chasen/","text":"You’re looking throughthe fire that burnsWhat’s on your mindI can tell it hurtsTears don’t fallif nothing is wrongSo come closeTonight is still youngOoh’ u u u~~ there is love for youThere is love for you in my armsOoh’ u u u~~ you are everythingEverything that I’m living forAnd don’t be afraidto tell me what’s on your heartOoh’ u u u~~ there is love for youhere in my armsPictures they paintThe memories of my homeEven in a crowd without you I am aloneGod I know you made an angel for meSomewhere close that’s my destinyOoh’ u u u~~ there is love for youThere is love for you in my armsOoh’ u u u~~ you are everythingEverything that I’m living forAnd don’t be afraidto tell me what’s on your heartOoh’ u u u~~ there is love for youhere in my armsCome close hear my breath breathingWhispering the words I love youCome close see your futureAnd know that there is hopeand there is love for youOoh’ u u u~~ there is love for youThere is love for you in my armsOoh’ u u u~~ you are everythingEverything that I’m living forAnd don’t be afraidto tell me what’s on your heartOoh’ u u u~~ there is love for youhere in my arms…here in my arms…There is love…in my arms…你的目光穿过那燃烧的烈火什么在你脑海闪烁我知道那是伤和痛眼泪请不要坠落因为一切没有错靠近我今夜依旧年轻矍铄Ooh’ u u u~~ 这是给你的爱这爱就在我的怀中Ooh’ u u u~~ 你是我的所有支撑我活着的理由别再颤抖告诉我你内心欢喜或难过Ooh’ u u u~~ 这是给你的爱就在我怀中他们绘出的画卷是我家的温柔即便在人群中行走 没有你 我也是孤独落寞上天啊 你赐一个天使予我冥冥中 与我的宿命吻合Ooh’ u u u~~ 这是给你的爱这爱就在我的怀中Ooh’ u u u~~ 你是我的所有支撑我活着的理由别再颤抖告诉你内心欢喜或难过Ooh’ u u u~~ 这是给你的爱就在我怀中靠近我 感受我呼吸汹涌同你耳语我的情意浓浓靠近我 展望将来的长路我知道希望就在不远处这是给你的爱Ooh’ u u u~~ 这是给你的爱这爱就在我的怀中Ooh’ u u u~~ 你是我的所有支撑我活着的理由别再颤抖告诉你内心欢喜或难过Ooh’ u u u~~ 这是给你的爱在我的怀中在我的怀中这份爱就在我的怀中","tags":[{"name":"音乐","slug":"音乐","permalink":"https://bantina.github.io/tags/音乐/"}]},{"title":"初级篇-通用方法社区篇","date":"2016-12-11T08:41:46.000Z","path":"2016/12/11/初级篇-通用方法社区篇/","text":"1.字符串的反转：123var str=\"12345\";var newstr=str.split(\"\").reverse().join(\"\");console.log(newstr); 2.兼容document.getElementsByClassName 方法：123456789101112131415if(!document.getElementsByClassName)&#123; document.getElementsByClassName=function(cls)&#123; var ret=[]; var els=document.getElementsByTagName('*'); for (var i = 0; i &lt; els.length; i++) &#123; if(els[i].className===cls || els[i].className.indexOf(cls +' ')&gt;=0 || els[i].className.indexOf(' '+cls)&gt;=0 || els[i].className.indexOf(' '+cls +' ')&gt;=0)&#123; ret.push(els[i]); &#125; &#125;; return ret; &#125;&#125; 3.js事件代理:1234obj.onclick=function(e)&#123; e=e||window.event; var el=e.srcElement ? e.srcElement : e.target; //-----------&#125; 4.获得00-99的随机数:1234567function getRandom()&#123; var rand=parseInt(Math.random()*(99-0+1)+0); if(rand&lt;10)&#123; rand=(Array(2).join('0') + rand).slice(-2); &#125; return rand;&#125; 5.获取 div的css中的height(兼容): 5.1 var maxH=el.style.height; //获取不到值,style本身只能获取写到标签内的值；123456789101112function getMaxHeight()&#123; var heightVal=0; if(window.getComputedStyle)&#123; //Chrome &amp; FireFox heightVal=window.getComputedStyle(el,null).getPropertyValue('height'); &#125;else&#123; // IE heightVal=el.currentStyle['height']; if(heightVal=='auto')&#123; //IE中对于未定义高度的div会返回auto heightVal=el.offsetHeight; &#125; &#125; return heightVal;&#125; 5.2 获取样式的封装函数:currentStyle IE中getComputedStyle firefox中1234567function getStyle(obj,attr)&#123;//针对OFFSET属性的bug; if(obj.currentStyle)&#123;//currentStyle IE浏览器； return obj.currentStyle[attr]; &#125;else&#123;//getComputedStyle firefox浏览器 return getComputedStyle(obj,false)[attr]; &#125;&#125; 6.获取浏览器前缀的方法:判断某个元素的CSS样式中是否存在transition属性1234567891011var _prefix=(function(temp)&#123; var aPrefix=[\"webkit\",\"Moz\",\"o\",\"ms\"], props=\"\"; for (var i in aPrefix) &#123; props=aPrefix[i]+\"Transition\"; if(temp.style[props]!==undefined)&#123; return \"-\"+aPrefix[i].toLowerCase()+\"-\"; &#125; &#125;; return false;&#125;)(document.createElement(PageSwitch)); 7.设置页面居中eg: 登录浮层12345678function autoCenter(el)&#123; var bodyW=document.documentElement.clientWidth; var bodyH=document.documentElement.clientHeight; var elW=el.offsetWidth; var elH=el.offsetHeight; el.style.left=(bodyW-elW)/2+\"px\"; el.style.top=(bodyH-elH)/2+\"px\";&#125; 8.设置全屏eg: 遮罩效果1234function fillToBody(el)&#123; el.style.width=document.documentElement.clientWidth+\"px\"; el.style.height=document.documentElement.clientHeight+\"px\";&#125; 9.取消默认行为方法eg: 禁止图片被选中的效果1document.onselectstart=new Function(\"event.returnValue=false;\"); 10.获取元素相对屏幕左边/上边的距离123456789101112131415function getPosition(node)&#123; var left=node.offsetLeft; var top=node.offsetTop; //获取元素父元素； var parent=node.offsetParent; //存在父元素时： while(parent!=null)&#123; left+=parent.offsetLeft; top+=parent.offsetTop; //父的父； parent=parent.offsetParent; &#125; //同时返回left和top值； return &#123;\"left\":left,\"top\":top&#125;;&#125; 11.删除一个字符串的左右空格1234function trim(str) &#123; return str.replace(/(^\\s*)|(\\s*$)/g,\"\"); &#125; 12.截取字符串长度 字符字母字节分开123456789101112131415161718192021222324/** * 截取字符串长度 字符字母字节分开. * @param &#123;截取name值&#125; str * @param &#123;从第len位开始后以...代替&#125; len * @return &#123;限定长度后截取的字符串&#125; */ function dealString(str,len) &#123; var strlen = 0; var s = \"\"; for(var i = 0;i &lt; str.length;i++) &#123; if(str.charCodeAt(i) &gt; 128)&#123; strlen += 2; &#125;else&#123; strlen++; &#125; if(strlen &gt; len)&#123; return s+'...' ; &#125;else&#123; s += str.charAt(i); &#125; &#125; return s; &#125; 13.【下拉菜单】得到下拉菜单的显示的文本(text)/值(value)123function getSelectText(selectObj) &#123; return selectObj.options[selectObj.selectedIndex].text; &#125; 14.【下拉菜单】清空下拉菜单里面的内容12345function clearSelect(selectObj) &#123; for (var i=selectObj.options.length; i &gt;0; i--) &#123; selectObj.remove(0); &#125; &#125; 15.【下拉菜单】根据键值串的内容进行下拉菜单的动态组装12345678910111213141516171819202122/** * 根据键值串的内容进行下拉菜单的动态组装 * @param &#123;要进行下拉菜单组装的dom对象&#125; obj * @param &#123;键值对用,和;分割,例如'1,男;2,女;3,未知'&#125; valAndText */ function setSelectContent(obj,valAndText)&#123; if(trim(valAndText)=='')&#123; alert('没有要进行组装下拉菜单的数据!'); return false; &#125; clearSelect(obj); var keyandvalues = valAndText.split(';'); for(var i=0;i&lt;keyandvalues.length;i++)&#123; var arr = keyandvalues[i].split(','); if(arr)&#123; var value =arr[0]; var text =arr[1]; var objOption = new Option(text,value); obj.add(objOption); &#125; &#125; &#125; 16.【多选框】返回选中的checkbox的id组成的字符串,逗号隔开1234567891011121314151617/** * 返回选中的checks的id组成的字符串,逗号隔开. * @param &#123;checks数组&#125; checks * @return 选择的id组成的字符串 */ function getCheckedIds(checks)&#123; var selectedValue = ''; var len = checks.length; for(var index=0; index&lt;len; index++) &#123; if(checks[index].checked==true) &#123; selectedValue += checks[index].value+\",\"; &#125; &#125; if(selectedValue.length&gt;0) return selectedValue.substring(0,selectedValue.length-1); return selectedValue; &#125;","tags":[{"name":"js初级篇","slug":"js初级篇","permalink":"https://bantina.github.io/tags/js初级篇/"}]},{"title":"初级篇-短小精悍黑魔法篇","date":"2016-12-11T08:37:29.000Z","path":"2016/12/11/初级篇-短小精悍黑魔法篇/","text":"1[] == ![] //true; 提高遍历性能；123for (var i = 0; a; a=arr[i++]) &#123; console.log(a);&#125;; 将一个变量转换为bool值1var boolbar=!!bar; 生成6位数字验证码123console.log(('000000'+Math.floor(Math.random()*999999)).slice(-6));console.log(Math.random().toString().slice(-6));console.log(Math.random().toFixed(6).slice(-6)); 16进制颜色代码生成123(function()&#123; return '#'+('00000'+(Math.random()*0x1000000&lt;&lt;0).toString(16)).slice(-6);&#125;)()","tags":[{"name":"js初级篇","slug":"js初级篇","permalink":"https://bantina.github.io/tags/js初级篇/"}]},{"title":"初级篇-官方经典模式开启","date":"2016-12-11T08:36:28.000Z","path":"2016/12/11/初级篇-官方经典模式开启/","text":"本篇所有内容整理来自-《javascript高级程序设计(第三版)》对应章节 第4章 执行环境及作用域 4.2.1延长作用域链；try-catch/with()—-会在作用域链的前端添加一个变量对象；1234567function bulidUrl()&#123; //with语句---将指定的对象添加到作用域链中； var qs=\"?debug=true\"; //catch语句---创建一个新的变量对象； with(location)&#123; var url=href+qs; //实际相当于引用了 location.href,qs为函数中定义的变量； &#125; return url; //url在with中定义，属于执行函数的一部分，可以返回；&#125; 第7章 函数表达式 1.闭包一变量；12345678910111213141516171819202122function createFunctions()&#123; var result=new Array(); for(var i=0;i&lt;10;i++)&#123; result[i]=function()&#123; //闭包中 所保存的是整个变量对象； return i; &#125;; &#125; return result;&#125;function createFunctions2()&#123; var result2=new Array(); for (var i = 0; i &lt; 10; i++) &#123; result2[i]=function(num)&#123; //结果赋给数组； return function()&#123; //在闭包的外层定义了一个立即执行的匿名函数， return num; &#125;; &#125;(i); //将i的当前值复制给参数num &#125;; return result2;&#125;console.log(createFunctions()); //返回一个函数数组；console.log(createFunctions2()); 2.关于闭包中的this对象 先来个普通对象的普通方法的栗子: 1234567891011var name=\"The Window\";var object0=&#123; name:\"MY object\", getName:function()&#123; return this.name; &#125;&#125;console.log(object0.getName()); //MY objectconsole.log((object0.getName)()); //MY objectconsole.log((object0.getName=object0.getName)()); //The Window---非严格模式下；//--先执行了一条赋值语句，为函数本身，this值不能得到维持； 接着闭包中的this 栗子来了 123456789101112131415161718192021var object=&#123; name:\"MY object\", getName:function()&#123; return function()&#123; return this.name;//每个函数在调用时自动获取arguments和this,且只会搜索到其活动对象为止； //所以闭包中永远不可能访问外部函数中的这两个变量； &#125;; &#125;&#125;console.log(object.getName()()); //The Window 注意：object.getName() 返回的是一个函数； //为了获取到自身的name属性；var object2=&#123; name:\"MY object\", getName:function()&#123; var _this=this; //_this=Object&#123;name:\"MY object\"&#125;-----_this完全复制了object2，是个对象； return function()&#123; return _this.name; //相当于在闭包内 访问了object2副本的 属性； &#125;; &#125;&#125;console.log(object2.getName()()); //MY object 3.闭包中的 内存泄露12345678910111213141516171819function assignHandler()&#123; var element=document.getElementById(\"ele\"); element.onclick=function()&#123; //element事件处理的闭包；----它创建了一个循环引用； //由于其保存了一个对assignHandler()的活动对象的引用， //造成 无法减少对element的引用数--只要其存在，对element引用数至少为1； //所以造成 占用内存永远收不回来； alert(element.id); &#125;;&#125;// 解决方法；function assignHandler2()&#123; var element=document.getElementById(\"ele\"); var id=element.id; //先存储在一个变量中； element.onclick=function()&#123; //闭包中引用该变量--从而消除了循环引用； alert(id);//然而即使不直接引用element，闭包中仍包含了函数的整个活动对象； &#125;; //即 element仍会被保存 一个引用； element=null; //---因此，将其设为null---释放&#125; 4.闭包回顾总结： 内部含有闭包的函数在执行完毕后，其活动对象也不会被销毁， —因为闭包函数 的 作用域链 仍然在引用 其 活动对象； 即 外部函数在返回后，其执行环境的作用域链 会被销毁，但它的 活动对象仍留在内存中 知道闭包函数被销毁后，其活动对象才被销毁。 第8章 window对象 1.检测弹出窗口 是否屏蔽程序123456789101112var blocked=true; try&#123; var baidu=window.open(\"http://baidu.com\"); if(baidu==null)&#123; blocked=true; &#125; &#125;catch(ex)&#123; blocked=true; &#125; if(blocked)&#123; alert(\"the popup was blocked\"); &#125; 2.解析并获取url的搜索 参数及值 Location对象 hash/host/hostname/href/pathname/port/protocol/search 以上属性修改值时 每次会在历史记录中生成记录–最好使用 replace()方法； location.reload()—-不传递值时，从浏览器缓存中加载，传值true时，从服务器重新加载；123456789101112131415161718function getQueryStringArgs()&#123; var qs=(location.search.length&gt;0?location.search.substring(1):\"\"), args=&#123;&#125;, items=qs.length?qs.split(\"&amp;\"):[], item=null, name=null, value=null, len=items.length; for(var i=0;i&lt;len;i++)&#123; item=items[i].split(\"=\"); name=decodeURIComponent(item[0]); value=decodeURIComponent(item[1]); if(name.length)&#123; args[name]=value; &#125; &#125; return args;&#125; 3.检测浏览器插件支持12345678910111213141516171819202122232425262728293031//IE无效；function hasPlugin(name)&#123; name=name.toLoweCase(); for(var i=0;i&lt;navigator.plugins.length;i++)&#123; if(navigator.plugins[i].name.toLowerCase().indexOf(name)&gt;-1)&#123; return true; &#125; &#125; return false;&#125;alert(hasPlugin(\"Flash\"));//IE版检测插件function hasIEPlugin(name)&#123; try&#123; new ActiveXObject(name); //IE 专有的ActiveXObject类型； return true; &#125;catch(ex)&#123; return false; &#125;&#125;alert(hasIEPlugin(\"QuickTime.QuickTime\"));//鉴于浏览器检测插件的差异性，---应针对每个插件分别创建检测函数；//检测所有浏览器中的Flash;function hasFlash()&#123; var result=hasPlugin(\"Flash\"); if(!result)&#123; result=hasIEPlugin(\"ShockwaveFlash.ShockwaveFlash\"); &#125; return result;&#125;alert(hasFlash()); 第9章 客户端检测 1.浏览器能力检测–作为下一步解决方案的依据，而不能判断用户使用什么浏览器；123456789101112131415161718function isSortable(object)&#123; //return !!object.sort; //只检测了是否含sort方法----&#123;sort:true&#125;--true; return typeof object.sort==\"function\";&#125;//但对于DOM方法，不能如上检测，eg:function hasCreateElement()&#123; //IE8及之前版本不行----COM-object return typeof document.createElement==\"function\";&#125;//故综合 在各浏览器中测试任何对象的某个特性是否存在，如下:function isHostMethod(object,property)&#123; var t=typeof object[property]; return t=='function'||(!!(t=='object'&amp;&amp;object[property]))||t=='unknown';&#125;//IE中测试如下：ActiveXObjectvar xhr=new ActiveXObject(\"Microsoft.XMLHttp\");console.log(isHostMethod(xhr,\"open\"));//其他测试；console.log(document,\"createElement\"); 2.用户代理检测123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169var client=function()&#123; //呈现引擎； var engine=&#123; ie:0, gecko:0, webkit:0, khtml:0, opera:0, //具体版本号： ver:null &#125;; //浏览器： var browser=&#123; ie:0, firefox:0, safari:0, konq:0, opera:0, chrome:0, //具体版本号： ver:null &#125;; //平台、设备和操作系统 var system=&#123; win:false, mac:false, xll:false, //移动设备： iphone:false, ipod:false, ipad:false, ios:false, android:false, nokiaN:false, winMobile:false, //游戏系统 wii:false, ps:false &#125;; //检测呈现引擎和浏览器 var ua=navigator.userAgent; if(window.opera)&#123; //检测opera呈现引擎 engine.ver=browser.ver=window.opera.version(); engine.opera=browser.opera=parseFloat(engine.ver); &#125;else if(/AppleWebkit\\/(\\S+)/.test(ua))&#123; //检测webkit呈现引擎 engine.ver=RegExp[\"$1\"]; engine.webkit=parseFloat(engine.ver); if(/Chrome\\/(\\S+)/.test(ua))&#123; //确定是Chrome还是Safari; browser.ver=RegExp[\"$1\"]; browser.chrome=parseFloat(browser.ver); &#125;else if(/Version\\/(\\S+)/.test(ua))&#123; browser.ver=RegExp[\"$1\"]; browser.safari=parseFloat(browser.ver); &#125;else&#123; var safariVersion=1; if(engine.webkit&lt;100)&#123; safariVersion=1; &#125;else if(engine.webkit&lt;312)&#123; safariVersion=1.2; &#125;else if(engine.webkit&lt;412)&#123; safariVersion=1.3; &#125;else&#123; safariVersion=2; &#125; browser.safari=browser.ver=safariVersion; &#125; &#125;else if(/KHTML\\/(\\S+)/.test(ua)||/Konqueror\\/([^;]+)/.test(ua))&#123; //检测khtml呈现引擎 engine.ver=browser.ver=RegExp[\"$1\"]; engine.khtml=browser.konq=parseFloat(engine.ver); &#125;else if(/rv:([^\\)]+)\\) Gecko\\/\\d&#123;8&#125;/.test(ua))&#123; //检测gecko呈现引擎 engine.ver=RegExp[\"$1\"]; engine.gecko=parseFloat(engine.ver); if(/Firefox\\/(\\S+)/.test(ua))&#123; //确定是够为Firefox browser.ver=RegExp[\"$1\"]; browser.firefox=parseFloat(browser.ver); &#125; &#125;else if(/MSIE ([^;]+)/.test(ua))&#123; //检测ie呈现引擎 engine.ver=browser.ver=RegExp[\"$1\"]; engine.ie=browser.ie=parseFloat(engine.ver); &#125; browser.ie=engine.ie; browser.opera=engine.opera; //检测平台： var p=navigator.platform; system.win=p.indexOf(\"Win\")==0; system.mac=p.indexOf(\"Max\")==0; system.xll=(p==\"Xll\")||(p.indexOf(\"Linux\")==0); //检测Windows 操作系统： if(system.win)&#123; if(/Win(?:dows)?([^do]&#123;2&#125;)\\s?(\\d+\\.\\d+)?/.test(ua))&#123; if(RegExp[\"$1\"]==\"NT\")&#123; switch(RegExp[\"$2\"])&#123; case \"5.0\": system.win=\"2000\"; break; case \"5.1\": system.win=\"XP\"; break; case \"6.0\": system.win=\"Vista\"; break; case \"6.1\": system.win=\"7\"; break; default: system.win=\"NT\"; break; &#125; &#125;else if(RegExp[\"$1\"]==\"9x\")&#123; system.win=\"ME\"; &#125;else&#123; system.win=RegExp[\"$1\"]; &#125; &#125; &#125; //移动设备； system.iphone=ua.indexOf(\"iPhone\")&gt;-1; system.ipod=ua.indexOf(\"iPod\")&gt;-1; system.ipad=ua.indexOf(\"iPad\")&gt;-1; system.nokiaN=ua.indexOf(\"NokiaN\")&gt;-1; //Windows mobile if(system.win==\"CE\")&#123; system.winMobile=system.win; &#125;else if(system.win==\"Ph\")&#123; if(/Windows Phone OS (\\d+.\\d+)/.test(ua))&#123; system.win=\"Phone\"; system.winMobile=parseFloat(RegExp(\"$1\")); &#125; &#125; //检测iOS版本： if(system.mac&amp;&amp;ua.indexOf(\"Mobile\")&gt;-1)&#123; if(/CPU (?:iPhone )?OS (\\d+_\\d+)/.test(ua))&#123; system.ios=parseFloat(RegExp.$1.replace(\"_\",\".\")); &#125;else&#123; system.ios=2; &#125; &#125; //检测Android版本： if(/Android (\\d+\\.\\d+)/.test(ua))&#123; system.android=parseFloat(RegExp.$1); &#125; //游戏系统： system.wii=ua.indexOf(\"Wii\")&gt;-1; system.ps=/playstation/i.test(ua); //返回对象： return&#123; engine:engine, browser:browser, system:system &#125;; &#125;(); 第10章 DOM 1.NodeList类数组 转换为数组；123456789101112function convertToArray(nodes)&#123; var array=null; try&#123; array=Array.prototype.slice.call(nodes,0); //非IE浏览器 &#125;catch(ex)&#123; array=new Array(); //由于IE8及之前版本--COM对象 ---将其NodeList转换为数组，必须手动枚举所有成员； for (var i = 0; i &lt; nodes.length; i++) &#123; array.push(nodes[i]); &#125;; &#125; return array;&#125; 2.遍历获取元素element的属性attributes1234567891011121314function outputAttributes(element)&#123; var pairs=new Array(), attrName, attrValue, i,len; for(i=0,len=element.attributes.length;i&lt;len;i++)&#123; attrName=element.attributes[i].nodeName; attrValue=element.attributes[i].nodeValue; if(element.attributes[i].specified)&#123; //兼容IE7及之前版本；specified==true--在HTML中指定了相应属性； paris.push(attrName+\"=\\\"\"+attrValue+\"\\\"\"); &#125; &#125; return paris.join(\" \");&#125; 3.动态加载外部js文件1234567891011121314151617181920function loadScript(url)&#123; var script=document.createElement(\"script\"); script.type=\"text/javascript\"; script.src=url; document.body.appendChild(script);&#125;//动态加载js代码段；function loadScriptString(code)&#123; var script=document.createElement(\"script\"); script.type=\"text/javascript\"; try&#123; script.appendChild(document.createTextNode(code));//IE将&lt;script&gt;视为特殊元素，不允许DOM访问其子节点； //IE中style类似， &#125;catch(ex)&#123; script.text=code; //兼容IE；----text属性；--&lt;style&gt;使用style.styleSheet.cssText=css; &#125; document.body.appendChild(script); //document.getElementsByTagName(\"head\")[0].appendChild(script);&#125;loadScriptString(\"function sayHi()&#123;alert('hi');&#125;\"); 第11章 DOM扩展 1.删除ele元素的某个类名—-h5中用classList属性的add()/contains()/remove()/togggle()方法1234567891011121314function removeClassName(ele,strName)&#123; var classNames=ele.className.split(/\\s+/); var pos=-1, i, len; for(i=0,len=classNames.length;i&lt;len;i++)&#123; if(classNames[i]==strName)&#123; pos=i; break; &#125; &#125; classNames.splice(i,1); ele.className=classNames.join(\" \");&#125; 2.检测跨浏览器使用InnerText/textContent属性12345678910function getInnerText(element)&#123; return (typeof element.textContent==\"string\")?element.textContent:element.innerText;&#125;function setInnerText(element,text)&#123; if(typeof element.textContent==\"string\")&#123; element.textContent=text; &#125;else&#123; element.innerText=text; &#125;&#125; 第12章 DOM2和DOM3 1.判断浏览器是否支持以下DOM模块12345var supportsDOM2Core=document.implementation.hasFeature(\"Core\",\"2.0\");var supportsDOM3Core=document.implementation.hasFeature(\"Core\",\"3.0\");var supportsDOM2HTML=document.implementation.hasFeature(\"HTML\",\"2.0\");var supportsDOM2Views=document.implementation.hasFeature(\"Views\",\"2.0\");var supportsDOM2XML=document.implementation.hasFeature(\"XML\",\"2.0\"); 2.不同浏览器中取得样式表对象12345function getStyleSheet(element)&#123; return element.sheet||element.styleSheet; //IE--styleSheet;&#125;var link=document.getElementsByTagName(\"link\")[0]; //eg:获取第一个&lt;link/&gt;引入的样式表；var sheet=getStyleSheet(link); 3.offset dimension 取得元素的左/上偏移量1234567891011121314151617181920212223242526272829function getElementLeft(ele)&#123; var actualLeft=ele.offsetLeft; //offset dimension偏移量--描述可见空间，不包含margin; var current=ele.offsetParent; //offsetParent与parentNode的值不一定相等(td-table) while(current!==null)&#123; //DOM逐级向上回溯； actualLeft+=current.offsetLeft; current=current.offsetParent; &#125; return actualLeft;&#125; /** * 1.1改进版： * @param &#123;dom对象&#125; obj * @return &#123;位置值&#125; */ function getPosition(node)&#123; var left=node.offsetLeft; var top=node.offsetTop; //获取元素父元素； var parent=node.offsetParent; //存在父元素时： while(parent!=null)&#123; left+=parent.offsetLeft; top+=parent.offsetTop; //父的父； parent=parent.offsetParent; &#125; //同时返回left和top值； return &#123;\"left\":left,\"top\":top&#125;; &#125; 4.client dimention确定浏览器视口大小；—-不包含边框和滚动条12345678910111213function getViewport()&#123; if(document.compatMode==\"BackCompat\")&#123; //是否为混杂模式；BackCompat--标准兼容模式关闭 return&#123; width:document.body.clientWidth, //IE7之前版本； height:document.body.clientHeight &#125;; &#125;else&#123; return&#123; width:document.documentElement.clientWidth, height:document.documentElement.clientHeight &#125;; &#125;&#125; 5.scroll dimension 滚动大小12345678910111213function getDocSize()&#123; if(document.compatMode==\"BackCompat\")&#123; //是否为混杂模式；BackCompat--标准兼容模式关闭 return&#123; docWidth:Math.max(document.body.scrollWidth,document.body.clientWidth), docHeight:Math.max(document.body.scrollHeight,document.body.clientHeight) &#125;; &#125;else&#123; return&#123; docWidth:Math.max(document.documentElement.scrollWidth,document.documentElement.clientWidth), docHeight:Math.max(document.documentElement.scrollHeight,document.documentElement.clientHeight) &#125;; &#125;&#125; 第13章 事件 1.EventUtil 跨浏览器事件处理程序–求同存异1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374757677787980818283848586878889var EventUtil=&#123; //添加事件； addHandler:function(element,type,handler)&#123; if(element.addEventListener)&#123; //DOM2级方法； element.addEventListener(type,handler,false); &#125;else if(element.attachEvent)&#123; //兼容IE； element.attachEvent(\"on\"+type,handler); &#125;else&#123; element[\"on\"+type]=handler; //DOM0级方法； &#125; &#125;, //获取事件对event对象的引用； getEvent:function(event)&#123; return event?event:window.event; //?兼容DOM的浏览器：IE中，event参数未定义-undefined; &#125;, //获取时事件目标； getTarget:function(event)&#123; return event.target||event.srcElement; &#125;, //取消事件默认行为； preventDefault:function(event)&#123; if(event.preventDefault)&#123; event.preventDefault(); &#125;else&#123; event.returnValue=false; &#125; &#125;, //移除事件； removeHandler:function(element,type,handler)&#123; if(element.removeEventListener)&#123; element.removeEventListener(type,handler,false); &#125;else if(element.detachEvent)&#123; element.detachEvent(\"on\"+type,handler); &#125;else&#123; element[\"on\"+type]=null; &#125; &#125;, //阻止事件流(捕获/冒泡)； stopPropagation:function(event)&#123; if(event.stopPropagation)&#123; event.stopPropagation(); &#125;else&#123; event.cancelBubble=true; &#125; &#125;, //获取鼠标事件 getButton:function(event)&#123; if(document.implementation.hasFeature(\"MouseEvents\",\"2.0\"))&#123; //是支持DOM版 return event.button; &#125;else&#123; switch(event.button)&#123; //兼容IE，规范化 case 0: case 1: case 3: case 5: case 7: return 0; case 2: case 6: return 2; case 4: return 1; &#125; &#125; &#125;, //获取鼠标滚轮增量值(wheelDelta)的方法； getWheelDelta:function(event)&#123; if(event.wheelDelta)&#123; return (client.engine.opera&amp;&amp; client.engine.opera&lt;9.5?-event.wheelDelta:event.wheelDelta); //兼容Opera9.5之前版本 heelDelta值得正负号颠倒； &#125;else&#123; return -event.detail*40; //detail假设保存其值，兼容Firefox; &#125; &#125;, //获取字符编码； getCharCode:function(event)&#123; if(typeof event.charCode==\"number\")&#123; return event.charCode; &#125;else&#123; return event.keyCode; //兼容IE8； &#125; &#125;&#125; //调用示例：btn.onclick=function(event)&#123; //事件对象的传入； // event=EventUtil.getEvent(event); // var target=EventUtil.getTarget(event); // EventUtil.preventDefault(event); // &#125; 2.兼容IE8不支持事件对象上的页面坐标—根据客户区坐标和滚动信息计算123456789101112131415161718192021222324252627282930EventUtil.addHandler(ele,\"click\",function(event)&#123; event=EventUtil.getEvent(event); var pageX=event.PageX, pageY=event.PageY; if(pageX===undefined)&#123; pageX=event.clientX+(document.body.scrollLeft||document.documentElement.scrollLeft); &#125; if(pageY===undefined)&#123; pageY=event.clientY+(document.body.scrollTop||document.documentElement.scrollTop); &#125; alert(\"Page coordinates:\"+pageX+\",\"+pageY);&#125;);&lt;!-- --&gt;### 第15章 Canvas&gt; 1.EventUtil 跨浏览器事件处理程序--求同存异```js// &lt;canvas id=\"drawing\"&gt;&lt;/canvas&gt; var drawing=document.getElementById(\"drawing\"); if(drawing.getContext)&#123; //确定浏览器支持canvas元素； var context=drawing.getContext(\"2d\"); //取得图像的数据URI var imgURI=drawing.toDataURL(\"image/png\"); //toDataURL(MIME类型格式)导出在cavas上绘制的图像； //显示图像； var image=document.createElement(\"img\"); image.src=imgURI; document.body.appendChild(image); &#125; 第23章 离线应用与客户端存储； 1.基本的cookie操作：读取，写入，删除1234567891011121314151617181920212223242526272829303132333435var CookieUtil=&#123; get:function (name)&#123; var cookieName=encodeURIComponent(name)+\"=\", cookieStart=document.cookie.indexOf(cookieName), cookieValue=null; if(cookieStart&gt;-1)&#123; var cookieEnd=document.cookie.indexOf(\";\",cookieStart); if(cookieEnd==-1)&#123; cookieEnd=document.cookie.length; &#125; cookieValue=decodeURIComponent(document.cookie.substring(cookieStart+cookieName.length,cookieEnd)); &#125; return cookieValue; &#125;, set:function(name,value,expires,path,domain,secure)&#123; var cookieText=encodeURIComponent(name)+\"=\"+encodeURIComponent(value); if(expires instanceof Date)&#123; cookieText+=\";expires=\"+expires.toGMTString(); &#125; if(path)&#123; cookieText+=\";path=\"+path; &#125; if(domain)&#123; cookieText+=\";domain=\"+domain; &#125; if(secure)&#123; cookieText+=\";secure=\"; &#125; document.cookie=cookieText; &#125;, unset:function(name,path,domain,secure)&#123; //将失效时间设为过去的时间-1970.1.1；传值给set(); this.set(name,\"\",new Date(0),path,domain,secure); &#125;&#125; 2.子cookie12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485var SubCookieUtil=&#123; //获取单个子cookie的名称： get:function(name,subName)&#123; var subCookies=this.getAll(name); if(subCookies)&#123; return subCookies[subName]; &#125;else&#123; return null; &#125; &#125;, //获取所有子cookie并将其放入result对象中返回； getAll:function(name)&#123; var cookieName=encodeURIComponent(name)+\"=\", cookieStart=document.cookie.indexOf(cookieName), cookieValue=null, cookieEnd, subCookies, i, parts, result=&#123;&#125;; if(cookieStart&gt;-1)&#123; cookieEnd=document.cookie.indexOf(\";\",cookieStart); if(cookieEnd==-1)&#123; cookieEnd=document.cookie.length; &#125; cookieValue=document.cookie.substring(cookieStart+cookieName.length,cookieEnd); if(cookieValue.length&gt;0)&#123; subCookies=cookieValue.split(\"&amp;\"); for(i=0,len=subCookies.length;i&lt;len;i++)&#123; parts=subCookies[i].split(\"=\"); result[decodeURIComponent(parts[0])]=decodeURIComponent(parts[1]); &#125; return result; &#125; &#125; return null; &#125;, //设置子cookie: set:function(name,subName,value,expires,path,domain,secure)&#123; var subcookies=this.getAll(name)||&#123;&#125;; subcookies[subName]=value; this.setAll(name,subcookies,expires,path,domain,secure); &#125;, setAll:function(name,subcookies,expires,path,domain,secure)&#123; var cookieText=encodeURIComponent(name)+\"=\", subcookieParts=new Array(), subName; for(subName in subcookies)&#123; if(subName.length&gt;0&amp;&amp;subcookies.hasOwnProperty(subName))&#123; subcookieParts.push(encodeURIComponent(subName)+\"=\"+encodeURIComponent(subcookies[subName])); &#125; &#125; if(cookieParts.length&gt;0)&#123; cookieText_=subcookieParts.join(\"&amp;\"); if(expires instanceof Date)&#123; cookieText+=\";expires=\"+expires.toGMTString(); &#125; if(path)&#123; cookieText+=\";path=\"+path; &#125; if(domain)&#123; cookieText+=\";domain\"+domain; &#125; if(secure)&#123; cookieText+=\";secure\"; &#125; &#125;else&#123; cookieText+=\";expires=\"+(new Date(0)).toGMTString(); &#125; document.cookie=cookieText; &#125;, //删除子cookie，不同于删普通cookie；--因为只删所需，保留其余； //删除某个字cookie: unset:function(name,subName,path,domain,secure)&#123; var subcookies=this.getAll(name); if(subcookies)&#123; delete subcookies[subName]; this.setAll(name,subCookies,null,path,domain,secure); &#125; &#125;, //删除整个cookie: unsetAll:function(name,path,domain,secure)&#123; this.setAll(name,null,new Date(0),path,domain,secure); &#125;&#125;","tags":[{"name":"js初级篇","slug":"js初级篇","permalink":"https://bantina.github.io/tags/js初级篇/"}]},{"title":"sharetest","date":"2016-12-11T08:04:08.000Z","path":"2016/12/11/sharetest/","text":"","tags":[{"name":"心理学","slug":"心理学","permalink":"https://bantina.github.io/tags/心理学/"}]},{"title":"If u were a programmer","date":"2016-12-11T08:03:58.000Z","path":"2016/12/11/If u were a programmer/","text":"凌晨3点 —————————–分割线—————————- bug不停","tags":[{"name":"趣味","slug":"趣味","permalink":"https://bantina.github.io/tags/趣味/"}]},{"title":"初级篇-浏览器的兼容性之js","date":"2016-12-11T07:16:14.000Z","path":"2016/12/11/初级篇-浏览器的兼容性之js/","text":"1.window.onscroll 滚动条滚动时触发的事件 获取滚动条对象的兼容问题：IE-documentElement,谷歌-body;(clientWidth等属性与此相同)document.documentElement或document.body–IE7之前的版本；123window.onscroll=function()&#123; var osTop=document.documentElement.scrollTop||document.body.scrollTop;&#125; 2.addEvent 事件绑定 为了兼容IE使用统一的绑定事件的方法1234567function addEvent(el,event,callbackFunction)&#123; if(el.addEventListener)&#123; el.addEventListener(event,callbackFunction,false); //元素作用域； &#125;else if&#123; el.attachEvent('on'+event,callbackFunction); //全局作用域 &#125;&#125; 3.eventUtil 完整DOM事件 兼容写法 1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950var eventUtil=&#123; //添加句柄 addHandler:function(element,type,handler)&#123; if(element.addEventListener)&#123; element.addEventListener(type,handler,false); &#125;else if(element.attachEvent)&#123; element.attachEvent('on'+type,handler); &#125;else&#123; element['on'+type]=handler; &#125; &#125;, //删除句柄 removeHandler:function(element,type,handler)&#123; if(element.removeEventListener)&#123; element.removeEventListener(type,handler,false); &#125;else if(element.detachEvent)&#123; element.detachEvent('on'+type,handler); &#125;else&#123; element['on'+type]=null; &#125; &#125;, //获取事件对象； getEvent:function(event)&#123; return event?event:window.event; &#125;, //获取事件类型； getType:function(event)&#123; return event.type; &#125;, //获取事件来源元素； getElement:function(event)&#123; return event.target||event.srcElement; &#125;, //阻止事件默认行为； preventDefault:function(event)&#123; if(event.preventDefault)&#123; event.preventDefault(); &#125;else&#123; event.returnValue=false; &#125; &#125;, //阻止事件冒泡； stopPropagation:function(event)&#123; if(event.stopPropagation)&#123; event.stopPropagation(); &#125;else&#123; event.cancelBubble=true; &#125; &#125;&#125; 4.getElement 获取事件目标 123function getElement(event)&#123; return event.target||event.srcElement; //兼容IE 获取事件目标；&#125; 5.获取元素通过类名 123456789101112131415/*** @param &#123;classname&#125; claName* @param &#123;父元素的id，可选&#125; parent**/ function getByClass(clsName,parent)&#123; var oParent=parent?document.getElementById(parent):document; var eles=[]; var elements=oParent.getElementsByTagName('*'); for (var i = 0; i &lt; elements.length; i++) &#123; if(elements[i].className==clsName)&#123; eles.push(elements[i]); &#125; &#125;; return eles; &#125; 6.透明度—js控制透明度； IE中CSS透明度通过filter:alpha(opacity:*)设置；123456function setAttr(el,attr,val)&#123; if(attr=='opacity')&#123; el.style.filter='alpha(opacity:'+val+')';//针对IE浏览器的透明度写法 el.style.opacity=val/100;//针对谷歌、火狐浏览器的透明度写法,小数表示； &#125;&#125; 注：IE与其他浏览器设置透明度时 值 需换算；","tags":[{"name":"js初级篇","slug":"js初级篇","permalink":"https://bantina.github.io/tags/js初级篇/"}]},{"title":"最酷的你-Kurt Cobain","date":"2016-12-09T02:01:32.000Z","path":"2016/12/09/最酷的你-Kurt Cobain/","text":"It’s better to burn out than to fade away.","tags":[{"name":"心理学","slug":"心理学","permalink":"https://bantina.github.io/tags/心理学/"}]}]